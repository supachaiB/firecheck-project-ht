import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class EditFireTankPage extends StatefulWidget {
  final String tankIdToEdit;

  const EditFireTankPage({Key? key, required this.tankIdToEdit})
      : super(key: key);

  @override
  _EditFireTankPageState createState() => _EditFireTankPageState();
}

class _EditFireTankPageState extends State<EditFireTankPage> {
  final TextEditingController _tankIdController = TextEditingController();
  String? _type;
  String? _building;
  String? _floor;
  int _totalFloors = 0;

  List<String> _typeOptions = [];
  List<String> _buildingOptions = [];
  List<String> _floorOptions = [];

  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchDropdownData();
    _fetchTankData();
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• dropdown (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ñ‡∏±‡∏á & ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£)
  Future<void> _fetchDropdownData() async {
    try {
      var typeSnapshot =
          await FirebaseFirestore.instance.collection('FE_type').get();
      _typeOptions =
          typeSnapshot.docs.map((doc) => doc['type'] as String).toList();

      var buildingSnapshot =
          await FirebaseFirestore.instance.collection('buildings').get();
      _buildingOptions =
          buildingSnapshot.docs.map((doc) => doc['name'] as String).toList();

      setState(() {
        _isLoading = false; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
      });
    } catch (e) {
      print('üî• Error fetching dropdown data: $e');
    }
  }

  Future<void> _fetchTankData() async {
    try {
      DocumentSnapshot doc = await FirebaseFirestore.instance
          .collection('firetank_Collection')
          .doc(widget.tankIdToEdit)
          .get();

      if (doc.exists && doc.data() != null) {
        String? fetchedBuilding = doc['building'];
        String? fetchedFloor = doc['floor']?.toString(); // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô String
        String? fetchedType = doc['type'];
        String? fetchedTankId = doc['tank_id'];

        setState(() {
          _tankIdController.text = fetchedTankId ?? widget.tankIdToEdit;
          _type = _typeOptions.contains(fetchedType) ? fetchedType : null;
          _building = fetchedBuilding; // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
          _floor = null; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
          _isLoading = false;
        });

        // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏±‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
        if (_building != null) {
          await _fetchFloors(_building!, fetchedFloor);
        }
      } else {
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${widget.tankIdToEdit}");
      }
    } catch (e) {
      print('üî• Error fetching tank data: $e');
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å buildings.totalFloors
  Future<void> _fetchFloors(String buildingName,
      [String? selectedFloor]) async {
    try {
      var buildingDoc = await FirebaseFirestore.instance
          .collection('buildings')
          .where('name', isEqualTo: buildingName)
          .limit(1)
          .get();

      if (buildingDoc.docs.isNotEmpty) {
        var totalFloors = buildingDoc.docs.first['totalFloors'];

        if (totalFloors is String) {
          _totalFloors = int.tryParse(totalFloors) ?? 0;
        } else if (totalFloors is int) {
          _totalFloors = totalFloors;
        } else {
          _totalFloors = 0;
        }

        List<String> newFloorOptions =
            List.generate(_totalFloors, (index) => (index + 1).toString());

        setState(() {
          _floorOptions = newFloorOptions;

          // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
          if (selectedFloor != null && _floorOptions.contains(selectedFloor)) {
            _floor = selectedFloor;
          }
        });
      }
    } catch (e) {
      print('üî• Error fetching floors: $e');
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firestore
  Future<void> _updateTankData() async {
    try {
      await FirebaseFirestore.instance
          .collection('firetank_Collection')
          .doc(widget.tankIdToEdit)
          .update({
        'type': _type,
        'building': _building,
        'floor': _floor,
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
      );
      Navigator.pop(context); // ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    } catch (e) {
      print('üî• Error updating tank data: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏±‡∏á‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á'),
        backgroundColor: Colors.deepPurple,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // üè∑Ô∏è Input: ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏±‡∏á‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á
                  TextField(
                    controller: _tankIdController,
                    readOnly: true,
                    decoration: const InputDecoration(
                      labelText: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏±‡∏á‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á',
                      border: OutlineInputBorder(),
                    ),
                  ),
                  const SizedBox(height: 16),

                  // üî• Dropdown: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ñ‡∏±‡∏á‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á
                  DropdownButtonFormField<String>(
                    value: _type,
                    decoration: const InputDecoration(
                      labelText: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ñ‡∏±‡∏á‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á',
                      border: OutlineInputBorder(),
                    ),
                    items: _typeOptions.map((type) {
                      return DropdownMenuItem(value: type, child: Text(type));
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        _type = newValue;
                      });
                    },
                  ),
                  const SizedBox(height: 16),

                  // üè¢ Dropdown: ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
                  DropdownButtonFormField<String>(
                    value: _building,
                    decoration: const InputDecoration(
                      labelText: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£',
                      border: OutlineInputBorder(),
                    ),
                    items: _buildingOptions.map((building) {
                      return DropdownMenuItem(
                          value: building, child: Text(building));
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        _building = newValue;
                        _floor = null; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤ floor ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£
                      });
                      _fetchFloors(newValue!);
                    },
                  ),
                  const SizedBox(height: 16),

                  // üè¨ Dropdown: ‡∏ä‡∏±‡πâ‡∏ô (‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£)
                  DropdownButtonFormField<String>(
                    value: _floor,
                    decoration: const InputDecoration(
                      labelText: '‡∏ä‡∏±‡πâ‡∏ô',
                      border: OutlineInputBorder(),
                    ),
                    items: _floorOptions.map((floor) {
                      return DropdownMenuItem(value: floor, child: Text(floor));
                    }).toList(),
                    onChanged: (newValue) {
                      setState(() {
                        _floor = newValue;
                      });
                    },
                  ),
                  const SizedBox(height: 24),

                  // ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: _updateTankData,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.deepPurple,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        textStyle: const TextStyle(fontSize: 18),
                      ),
                      child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'),
                    ),
                  ),
                ],
              ),
            ),
    );
  }
}
